{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#General variables
let mAccPKey = base58'HyXCiJpt1eh1M1zZWDpYzbVW81yZL4XBjiJjGwxZqk2'

let mAccAddr = mAccPKey.addressFromPublicKey()

#Variables for compound
let keyTotalCompound = "total_compound"

let keyStakedCompound = "staked_compound"

let keyLastVP = "last_virtual_price"

let VPScale = 100000000

func keyStakedCompoundUser(user: Address) = user.toString()+"_"+keyStakedCompound

func calcVirtualPrice(totalStaked: Int, total: Int) = {
  if total == 0
  then
    1
  else
    if totalStaked == 0
    then
      1
    else
      fraction(total, VPScale, totalStaked)
}

#Variables for staking

let Scale = 100000000

func keyStakedAmount(address: Address) = address.toString() + "_farm_staked"

func keyLastCheckInterest(address: Address) =  address.toString() + "_lastCheck_interest"

func keyEggClaimed(address: Address) = address.toString() + "_claimed"

let  keyGlobalLastInterest = "global_lastCheck_interest"

let keyGlobalStaked = "global_staked"

let keyGlobalEggEarned =  "global_earnings"

let kLockedInvestments = "locked_investments"

func getCFAddress() = {
  getStringValue(this, "CF_ADDRESS").addressFromStringValue()
}

func isCollectiveFarmLocked()= {
    match getBoolean(getCFAddress(), kLockedInvestments) {
      case b:Boolean => b
      case _ => false
  }

}

#general methods

func getEggId() = {
  getStringValue(mAccAddr, "EGG_ASSET_ID").fromBase58String()
}

func setCFAddress(address: String) = {
  [
    StringEntry("CF_ADDRESS",address)
  ]
}

func getShareAssetId()={
  getStringValue(getCFAddress(), "SHARE_ASSET_ID").fromBase58String()
}

func tryGetInteger (key: String) = match getInteger(this, key) {
    case b: Int => 
        b
    case _ => 
        0
}

func tryGetString (key: String) = match getString(this, key) {
    case a: String => 
        a
    case _ => 
        ""
}

func claimStakingResult (address: Address) = {
    let currentInterest = tryGetInteger(keyGlobalLastInterest)
    let lastCheckInterest = tryGetInteger(keyLastCheckInterest(address))
    let stakedAmount = tryGetInteger(keyStakedAmount(address))

    let reward = if (lastCheckInterest > 0)
        then fraction((currentInterest - lastCheckInterest), stakedAmount, Scale)
        else 0
      [
        IntegerEntry(keyLastCheckInterest(address), currentInterest), 
        IntegerEntry(keyEggClaimed(address), (tryGetInteger(keyEggClaimed(address))) + reward), 
        ScriptTransfer(address, reward, getEggId())
      ]
    }

func handleCompoundTopUp(amount: Int)={
  let total = tryGetInteger(keyTotalCompound) + amount
  let staked = tryGetInteger(keyStakedCompound)
  let vp = calcVirtualPrice(staked,total)
  [
    IntegerEntry(keyTotalCompound, total),
    IntegerEntry(keyLastVP,vp)
  ]
}

func handleStakingTopUp (amount: Int) = {
    let currentInterest = tryGetInteger(keyGlobalLastInterest)
    let totalStakedAmount = tryGetInteger(keyGlobalStaked)
    let interestDelta = if ((totalStakedAmount > 0))
        then fraction(amount, Scale, totalStakedAmount)
        else 0
    [
      IntegerEntry(keyGlobalEggEarned, (tryGetInteger(keyGlobalEggEarned) + amount)), 
      IntegerEntry(keyGlobalLastInterest, (currentInterest + interestDelta))
    ]
}

#both
@Callable(i)
func topUpReward () = {

    let totalCompound = tryGetInteger(keyTotalCompound)
    let totalStaked   = tryGetInteger(keyGlobalStaked)
    let totalLocked = totalStaked+totalCompound

    let eggAssetId = getEggId()
    let shareTokenId = getShareAssetId()
    if (i.payments[0].assetId != eggAssetId)
    then throw("Wrong assetId, first payment should be EGG")
    else { 
      if (i.payments[1].assetId != shareTokenId)
      then throw("Wrong assetId, second payment should be farm tokens")
      else {
        let resHandleStaking = handleStakingTopUp(i.payments[0].amount) 
        let resHandleCompound = handleCompoundTopUp(i.payments[1].amount)
        (
          resHandleCompound++resHandleStaking, 
          true
          )

    }

    }
}

#both
@Callable(i)
func withdrawFarmTokens (amount: Int, compound: Boolean) = {
  let shareTokenId = getShareAssetId()
  if compound
  then {
    #Calculate vp price for 1 farm token to be able to payout
    let staked = tryGetInteger(keyStakedCompound)
    let total = tryGetInteger(keyTotalCompound)
    let vp = calcVirtualPrice(staked,total)

    #Calculate the virtual amount from your tokens to wd
    let virtualWd = fraction(amount, VPScale, vp)

    #Get amount of staked
    let keyStakedCompoundU = keyStakedCompoundUser(i.caller)
    let personalStaked = tryGetInteger(keyStakedCompoundU)

    if virtualWd > personalStaked
    then throw("You don't have so much funds to withdraw")
    else{
      [
          IntegerEntry(keyStakedCompoundU, personalStaked-virtualWd),
          IntegerEntry(keyStakedCompound, staked-virtualWd),
          IntegerEntry(keyTotalCompound, total-amount),
          ScriptTransfer(i.caller,amount,shareTokenId),
          IntegerEntry(keyLastVP,vp)
      ]
    }
  }
  else{
    let addressStr = toString(i.caller)
    let stakedAmount = tryGetInteger(keyStakedAmount(i.caller))
    if ((amount > stakedAmount))
        then throw("you don't have tokens available")
        else (
          claimStakingResult(i.caller) ++ 
          [
            IntegerEntry(keyStakedAmount(i.caller), (stakedAmount - amount)), 
            IntegerEntry(keyGlobalStaked, (tryGetInteger(keyGlobalStaked) - amount)), 
            ScriptTransfer(i.caller, amount, shareTokenId)
          ]
        )
  }

}

#both
@Callable(i)
func stakeFarmTokens (compound: Boolean) = {
  let shareTokenId = getShareAssetId()
  if (i.payments[0].assetId != shareTokenId)
  then throw("Wrong assetId")
  else{
    if compound
    then {
      let isLocked = isCollectiveFarmLocked()
      if isLocked 
      then throw("The farm is closed for investments, it can't compound")
      else {
        #get amount of already staked funds
        let keyStakedCompoundU = keyStakedCompoundUser(i.caller)
        let alreadyStaked = tryGetInteger(keyStakedCompoundU)

        #get total amount funds
        let total = tryGetInteger(keyTotalCompound)
        #get total amount userstaked funds
        let staked = tryGetInteger(keyStakedCompound)
        #calculate exactStakeAmount after normalization
        let vp = calcVirtualPrice(staked,total)
        let rawStakeAmount = i.payments[0].amount
        let exactStakeAmount = fraction(rawStakeAmount, VPScale, vp)

        #bug fix to make sure first claim also succeeds
        let lastCheckInterest = tryGetInteger(keyLastCheckInterest(i.caller))
        let currentInterest = tryGetInteger(keyGlobalLastInterest)

        let storeInterest = if (lastCheckInterest > 0)
        then lastCheckInterest
        else currentInterest

        [
          IntegerEntry(keyLastCheckInterest(i.caller), storeInterest), 
          IntegerEntry(keyStakedCompoundU,alreadyStaked+exactStakeAmount),
          IntegerEntry(keyTotalCompound,total+rawStakeAmount),
          IntegerEntry(keyStakedCompound,staked+exactStakeAmount),
          IntegerEntry(keyLastVP,vp)
        ]
      }
    }
    else{
        let amount = i.payments[0].amount
        let addressStr = toString(i.caller)
        let totalStakedAmount = tryGetInteger(keyGlobalStaked)
        if ((i.payments[0].assetId != shareTokenId))
        then throw("wrong asset attached")
        else (
          claimStakingResult(i.caller) ++ 
          [
            IntegerEntry(keyGlobalStaked, (totalStakedAmount + amount)), 
            IntegerEntry(keyStakedAmount(i.caller), (tryGetInteger(keyStakedAmount(i.caller)) + amount))
          ]
        )
    }
    }
  }

@Callable(i)
func initiateDapp(address: String) = {
  if (i.caller != this) then throw("Can be called only by the account") else {
    setCFAddress(address)
  }
}

#only staking
@Callable(i)
func claimReward () = claimStakingResult(i.caller)

        