{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let breederContract = base58'3P9REuLBnYBafDqtEu6hfzs2Rv2haSU158y'
let incubatorContract = base58'3P6TwNU39Ykkbeqhn5TE4a2736xsA1vXemM'
let eggAssetId = base58'3v7zGkeHS6KrsvmTRzEzvCxm5cdzkCtM7z5cM6efcjCB'
let MANTLENAME = "mantle"

let STATUSFREE = "FREE"
let STATUSOCCUPIED = "OCCUPIED"

func keyDuckLock(callerAddress: String, duckId: String) = {
  "address_" + callerAddress + "_duck_" + duckId + "_status"
}

func keyInvestor(callerAddress: String) = {
  "address_" + callerAddress + "_amount"
}


func keyArtefactInvested(type: String, artefactId: String) = {
  "artefact_" + type + "_artefactId_" + artefactId + "_invested"
}

func keyOnlyArtefactLevel(artefactId: ByteVector) = {
  "artefactId_" + artefactId.toBase58String() + "_level"
}

func keyArtefactIdByDuckAndType(type: String, duckId: ByteVector) = {
  "artefact_ " + type + "_duck_" + duckId.toBase58String() + "_artefactId"
}

func keyArtefactOwner(type: String, artefactId: ByteVector) = {
  "artefact_ " + type + "_artefactId_" + artefactId.toBase58String() + "_owner"
}

func keyArtefactOwnerAndStatus(type: String, owner: String, artefactId: ByteVector) = {
  "address_" + owner + "_artefact_" + type + "_artefactId_" + artefactId.toBase58String() + "_status"
}

func keyArtefactStatus(type: String, artefactId: ByteVector) = {
  "artefact_ " + type + "_artefactId_" + artefactId.toBase58String() + "_status"
}

func keyArtefactType(artefactId: ByteVector) = {
  "artefactId_" + artefactId.toBase58String() + "_type"
}

func keyArtefactLevel(type: String, owner: String, artefactId: ByteVector) = {
  "address_" + owner + "_artefact_" + type + "_artefactId_" + artefactId.toBase58String() + "_level"
}

func keyPutOnArtefact(type: String, owner: String, duckId: String, artefactId: ByteVector) = {
  "address_" + owner + "_duck_" + duckId + "_artefact_" + type + "_artefactId_" + artefactId.toBase58String() + "_status"
}

func keyArtefactExists(type: String, artefactId: ByteVector) = {
  "artefact_" + type + "_artefactId_" + artefactId.toBase58String()
}

@Callable(i)
func buyArtefact(type: String) = {
  if (type != MANTLENAME) then throw("You can buy only mantles now") 
  else {
    let MANTLEPRICE = 1_000_000
    let firstPayment = i.payments[0].value()
    if (firstPayment.assetId != eggAssetId) then throw("You can attach only EGG tokens with the following asset id: " + eggAssetId.toBase58String())
    else if (firstPayment.amount != MANTLEPRICE) then throw("To buy a mantle you currently need the following amount of EGGlets: " + MANTLEPRICE.toString())
    else {

      let issueMantleNFT = Issue("DUCK-MANTLE-0", "[Artefact] Mantle NFT for Jeduck", 1, 0, false)
      let mantleNftId = issueMantleNFT.calculateAssetId()

      let kMantleLevel = keyArtefactLevel(MANTLENAME, i.caller.toString(), mantleNftId)
      let kMantleExists = keyArtefactExists(MANTLENAME, mantleNftId)
      let kMantleOwner = keyArtefactOwner(MANTLENAME, mantleNftId)
      let kMantleStatus = keyArtefactStatus(MANTLENAME, mantleNftId)
      let kArtefactType = keyArtefactType(mantleNftId)
      let kMantleInvested = keyArtefactInvested(MANTLENAME, mantleNftId.toBase58String())
      let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(MANTLENAME, i.caller.toString(), mantleNftId)
      let kOnlyArtefactLevel = keyOnlyArtefactLevel(mantleNftId)

      [
        IntegerEntry(kMantleLevel, 1),
        IntegerEntry(kMantleInvested, MANTLEPRICE),
        BooleanEntry(kMantleExists, true),
        StringEntry(kMantleOwner, i.caller.toString()),
        StringEntry(kMantleStatus, STATUSFREE),
        StringEntry(kArtefactType, MANTLENAME),
        StringEntry(kArtefactOwnerAndStatus, STATUSFREE),
        IntegerEntry(kOnlyArtefactLevel, 1)
      ]
    }
  } 
}

@Callable(i)
func upgradeMantle(artefactId: String) = {
  let upgradePointPrice = 1_000_000
  let firstPayment = i.payments[0].value()
  if (firstPayment.assetId != eggAssetId) then throw("You can attach only EGG tokens with the following asset id: " + eggAssetId.toBase58String())
  else if (firstPayment.amount < upgradePointPrice) then throw("Minimal payment for upgrading mantle is: " + upgradePointPrice.toString())
  else {
    let kMantleExists = keyArtefactExists(MANTLENAME, artefactId.fromBase58String())
    let kMantleOwner = keyArtefactOwner(MANTLENAME, artefactId.fromBase58String())

    let mantleExists = getBooleanValue(kMantleExists)
    let mantleOwner = getStringValue(kMantleOwner)
    if (!mantleExists) then throw("Mantle with such an ID does not exist") else
    if (mantleOwner != i.caller.toString()) then throw("You're not an owner of the mantle")
    else {

      let kMantleInvested = keyArtefactInvested(MANTLENAME, artefactId)
      let mantleAlreadyInvested = getIntegerValue(kMantleInvested)

      let kMantleLevel = keyArtefactLevel(MANTLENAME, i.caller.toString(), artefactId.fromBase58String())
      let kOnlyArtefactLevel = keyOnlyArtefactLevel(artefactId.fromBase58String())

      let totalInvested = mantleAlreadyInvested + firstPayment.amount
      let newLevel = (10 * pow(totalInvested, 8, 6, 1, 8, HALFUP) + 100000000) / 100000000
      [
        IntegerEntry(kMantleLevel, newLevel),
        IntegerEntry(kMantleInvested, totalInvested),
        IntegerEntry(kOnlyArtefactLevel, newLevel)
      ]
    }
  }
}

@Callable(i)
func putOnArtefact(artefactId: String) = {
  let firstPayment = i.payments[0].value()
  let attachedAssetInfo = assetInfo(firstPayment.assetId.value()).value()
  if (attachedAssetInfo.issuer.bytes != incubatorContract && attachedAssetInfo.issuer.bytes != breederContract) then throw("You can attach only DUCKs issued by incubator or breeder ")
  else {
    let kMantleExists = keyArtefactExists(MANTLENAME, artefactId.fromBase58String())
    let kMantleOwner = keyArtefactOwner(MANTLENAME, artefactId.fromBase58String())
    let kMantleStatus = keyArtefactStatus(MANTLENAME, artefactId.fromBase58String())
    let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(MANTLENAME, i.caller.toString(), artefactId.fromBase58String())
    let kDuckLock = keyDuckLock(i.originCaller.toString(), firstPayment.assetId.value().toBase58String())
    let mantleExists = getBooleanValue(kMantleExists)
    let mantleOwner = getStringValue(kMantleOwner)
    let mantleStatus = getStringValue(kMantleStatus)

    let kArtefactIdByType = keyArtefactIdByDuckAndType(MANTLENAME, firstPayment.assetId.value())

    if (!mantleExists) then throw("Mantle with such an ID does not exist") else
    if (mantleOwner != i.caller.toString()) then throw("You're not an owner of the mantle") else 
    if (mantleStatus != STATUSFREE) then throw("Mantle is already used!")
    else {
      let kPutOnArtefact = keyPutOnArtefact(MANTLENAME, i.caller.toString(), firstPayment.assetId.value().toBase58String(), artefactId.fromBase58String())
      [
        BooleanEntry(kPutOnArtefact, true),
        StringEntry(kMantleStatus, STATUSOCCUPIED),
        StringEntry(kArtefactOwnerAndStatus, STATUSOCCUPIED),
        BooleanEntry(kDuckLock, true),
        StringEntry(kArtefactIdByType, artefactId)
      ]
    }
  }
}

@Callable(i)
func takeOffArtefact(duckId:String, artefactType: String) = {
  
  let kArtefactIdByTypeAndDuck = keyArtefactIdByDuckAndType(artefactType, duckId.fromBase58String())
  let artefactId = getStringValue(kArtefactIdByTypeAndDuck)
  
  let kArtefactType = keyArtefactType(artefactId.fromBase58String())
  let kPutOnArtefact = keyPutOnArtefact(artefactType, i.caller.toString(), duckId, artefactId.fromBase58String())
  let kPutOnArtefactStatus = getBooleanValue(kPutOnArtefact)
  let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(artefactType, i.caller.toString(), artefactId.fromBase58String())
  let kDuckLock = keyDuckLock(i.originCaller.toString(), duckId)

  let kMantleStatus = keyArtefactStatus(artefactType, artefactId.fromBase58String())
  if (kPutOnArtefactStatus != true) then throw("There is no duck with such parameteres")
  else {
    [
      DeleteEntry(kPutOnArtefact),
      DeleteEntry(kArtefactIdByTypeAndDuck),
      DeleteEntry(kDuckLock),
      StringEntry(kMantleStatus, STATUSFREE),
      StringEntry(kArtefactOwnerAndStatus, STATUSFREE)
    ]
  }
}

#stateKey;stateKey;...
@Callable(i)
func unlockNftForWars(keys: String) = {
  if (i.callerPublicKey != base58'ArbTEDzZLUKHkNzZSqEHfu5cpjvXnPtEPqBVwUTiCRSa') then throw("Cannot call this method") else {
    let keysList = keys.split(";")
    if (keysList.size() > 10) then throw("You cannot unlock more than 10 ducks in one transaction")
    else {
      func handleUnlockOneDuck(accum: List[DeleteEntry | ScriptTransfer], key: String) = {
        let kDuckLock = key.split("_") #address, {address}, duck, {assetId}, status
        accum ++ [
            DeleteEntry(key),
            ScriptTransfer(kDuckLock[1].value().addressFromStringValue(), 1, kDuckLock[3].value().fromBase58String())
          ]
      }
      FOLD<10>(keysList, [], handleUnlockOneDuck)
    }
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
