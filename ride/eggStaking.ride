{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#General variables
func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func keyStakedAmount(address: Address) = address.toString() + "_egg_staked"
func keyUser(user: String,identifier: String) = "VOTE_"+user+"_"+identifier
func keyTotalVoteByType(type: String, identifier: String) = "VOTE_TOTAL_"+type+"_"+identifier
func keyTotalVote(identifier: String)= "VOTE_TOTAL_"+identifier
func keyUnlockBlocks(address: String) = "unlockheight_"+address
func keyMultiplier(address: String, identifier: String) = "multiplier_"+address+"_"+identifier
let keyGlobalStaked = "global_staked"


#general methods
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetInteger (key: String) = {
    tryGetIntegerExternal(this, key)
}



func getVoteHeight(identifier: String) = tryGetInteger("VOTE_HEIGHT_START_"+identifier)
func getActiveVoteIdentifier() =  tryGetString("CURRENT_VOTE_IDENTIFIER")


func getDuration() = if tryGetIntegerExternal(getOracle(), "VOTE_DURATION") == 0 then 10000 else tryGetIntegerExternal(getOracle(), "VOTE_DURATION")
func getVoteByUser(user: String,identifier: String) = keyUser(user,identifier)

func getTotalVoteByType(type: String, identifier: String) = tryGetInteger(keyTotalVoteByType(type,identifier))
func getTotalVote(identifier: String) = tryGetInteger(keyTotalVote(identifier))

func calculateVotePower(multiplier: Int, baseVotePower: Int)={
    let increase = 250
    let increaseDecimals = 3
    let duration = getDuration()
    let powPart = pow(1000+increase,increaseDecimals,multiplier+1,0,8, HALFUP)
    let votePower = baseVotePower * powPart/(increase)/100000

    (
        [
          IntegerEntry("POWER_CALCULATION_POW_"+baseVotePower.toString()+"_"+multiplier.toString(),powPart),
          IntegerEntry("POWER_CALCULATION_"+baseVotePower.toString()+"_"+multiplier.toString(),votePower)
        ],
      votePower
    )
}

#TODO: CHECK IF CURRENT UNLOCKPERIOD IS BIGGER, IF SO KEEP OLD PERIOD
func setVotePower(caller: String, vote: String, votePower: Int,identifier: String, multiplier: Int)={
  let lockPeriod = getDuration()*(multiplier+1)
  let totalVoteCalc = calculateVotePower(multiplier-1,votePower)
  let totalVote = totalVoteCalc._2
  if vote == "" then [] else 
  if height+getDuration() < height then throw("CAVP: Voting is finished, please finalize the vote;" + " Arguments: " + caller + ", " + vote + ", " + totalVote.toString()) else
  let voteTotalByType = getTotalVoteByType(vote, identifier)
  let totalVoteOld = getTotalVote(identifier)
  let diff = totalVoteOld - totalVote


  [
      StringEntry(keyUser(caller,identifier),vote),
      IntegerEntry(keyTotalVoteByType(vote,identifier),voteTotalByType+diff),
      IntegerEntry(keyTotalVote(identifier), totalVote),
      IntegerEntry(keyMultiplier(caller,identifier), multiplier),
      IntegerEntry(keyUnlockBlocks(caller),getVoteHeight(identifier)+lockPeriod)
  ]++ totalVoteCalc._1 

}

#TODO: Read multiplier from storage
func adaptVotePowerStake(caller: String,votePower: Int)={
  let identifier = getActiveVoteIdentifier()
  let voteHeight = getVoteHeight(identifier)
  let voteByUserString = getVoteByUser(caller,identifier)
  let multiplier = 0
  setVotePower(caller,voteByUserString,votePower,identifier, multiplier)
}

func voteIsActive()={
      let identifier =getActiveVoteIdentifier()
      if identifier =="" then false else
      let voteHeight = getVoteHeight(identifier)
      voteHeight+getDuration() > height
}



@Callable(i)
func debug(multiplier: Int, baseVotePower: Int)={
calculateVotePower(multiplier,baseVotePower)
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("ECO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}


@Callable(i)
func startVote(identifier: String) ={
    if(i.caller!=getOracle()) then throw("ESV: Only the admin can start a vote for now!") else
    if voteIsActive() then throw("CSV: There is already a vote running!") else
    [
      IntegerEntry("VOTE_HEIGHT_START_"+identifier,height)
    ]
}



@Callable(i)
func voteYesOrNo(vote: Boolean, multiplier: Int)={

  let votePower = tryGetInteger(keyStakedAmount(i.caller))
  if votePower == 0 then throw("EVTL: Please stake some $EGG before you can vote!") else

  let voteAsString = vote.toString()

  let identifier = getActiveVoteIdentifier()
  let voteHeight = getVoteHeight(identifier)
  if voteHeight+getDuration() < height then throw("EVTL: Voting is finished, please finalize the vote!") else
  let voteByUserString = getVoteByUser(i.caller.toString(),identifier)

  if voteByUserString !="" then throw("EVTL: You can not change your vote!") else 
  setVotePower(i.caller.toString(),voteAsString,votePower,identifier, multiplier)

}

@Callable(i)
func finalizeVote(identifier: String)={
  let voteHeight = getVoteHeight(identifier)
  if voteHeight == 0 then throw("EFV: no vote running!") else 
  if voteHeight+getDuration() > height then throw("CFV: Voting is not finished!") else
  let totalStakedAmount = tryGetInteger(keyGlobalStaked)
  let totalVote = getTotalVote(identifier)
  let voteTotalByYes = getTotalVoteByType("true", identifier)
  let voteTotalByNo = getTotalVoteByType("false",identifier)

  let result = voteTotalByYes > voteTotalByNo 
  #TODO: add processing of vote results
  [
    DeleteEntry("CURRENT_VOTE_IDENTIFIER"),
    BooleanEntry("VOTE_PASSED_"+identifier,result)
  ]

}


#TODO: make sure people can only wd when timer of multiplier is finished!
@Callable(i)
func withdrawEgg (amount: Int) = {
  if (i.payments.size() > 0) then throw("CWFT: Please don't add payments") else
  if voteIsActive() then throw("CWFT: You can not unstake during a vote!") else

    let addressStr = toString(i.caller)
    let stakedAmount = tryGetInteger(keyStakedAmount(i.caller))
    let wdAmount = if (amount == -1) then stakedAmount else amount
    if (wdAmount > stakedAmount) then throw("CWFT: you don't have (that much) tokens available")else
        (
          [
            IntegerEntry(keyStakedAmount(i.caller), (stakedAmount - wdAmount)), 
            IntegerEntry(keyGlobalStaked, (tryGetInteger(keyGlobalStaked) - wdAmount)), 
            ScriptTransfer(i.caller, wdAmount, getEggAssetId()),
            IntegerEntry("last_staking_wd",wdAmount)
          ]
        )
  

}

#both
@Callable(i)
func stakeEgg () = {
  if (i.payments.size() > 1) then throw("ESFT: Too many payments added") else
  if (i.payments[0].assetId != getEggAssetId())then throw("ESFT: Wrong assetId")else
  let amount = i.payments[0].amount
  if amount ==0 then throw("ESFT: Please attach positive asset amount!") else
        
    let addressStr = toString(i.caller)
    let totalStakedAmount = tryGetInteger(keyGlobalStaked)

    let votePower = adaptVotePowerStake(i.caller.toString(),totalStakedAmount + amount) 
    [
      IntegerEntry(keyGlobalStaked, (totalStakedAmount + amount)), 
      IntegerEntry(keyStakedAmount(i.caller), (tryGetInteger(keyStakedAmount(i.caller)) + amount))
    ]++votePower

  }