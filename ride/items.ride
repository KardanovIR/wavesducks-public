{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func keyArtefactOwner(artefactName: String, owner: String) = artefactName+"_" + owner + "_owner"

func keyUnstakeHeight(artefactName: String, artefactId: String) = artefactName+"_" + artefactId + "_unstake_height"

func keyArtefactDuck(artefactName: String, duckId: String) = artefactName+"_"+duckId+"_duck"

func getProcessFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

let devAddress = base58'3P44yqcpfhPF2iC1nptm2ZJCTaN7VYhz9og'
let eggsNeeded = 3 * 1_0000_0000
let artefactsLimit = 301 + 600

let freeGenes = [
  "A",
  "B",
  "C",
  "D",
  "E"
]

let oldArtefacts = [
  "ART-LAKE",
  "ART-HOUSE",
  "ART-BIGHOUSE",
  "ART-FIXGENE",
  "ART-FREEGENE", 
  "ART-MIRROR", # +++
  "ART-POMP", # Pompadour
  "ART-CAPE", # Magic Cape
  "ART-HAT", # Quacker Hat
  "ART-CUSTOMDUCK"
]

let artefacts = [
  "ART-XMISTL",
  "ART-XHAT",
  "ART-XSCARF",
  "ART-XSWEATER",
  "ART-XSOCK", 
  "ART-XTREE"
]

let stakeableWithLock = [
  "ART-LAKE",
  "ART-XTREE"
]

let stakeableWithoutLock = [
  "ART-XMISTL"
]

let allStakeable = stakeableWithoutLock++stakeableWithLock

let allArtefact = artefacts++oldArtefacts


func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
}

func getRandomNumber(variants: Int, txId: ByteVector, finishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(finishHeight-1).value()
  let randomHash = sha256(base58'items' + txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomArtefact(boxId: ByteVector, h: Int) = {
  let randomNumber = getRandomNumber(6, boxId, h, 1)
  artefacts[randomNumber]
}

func getRandomGenes(txId: ByteVector, h: Int) = {
  let randomNumber = getRandomNumber(6, txId, h, 2)
  freeGenes[randomNumber]
}

func checkArtefactDetails(assetId: ByteVector) = {
  let asset = assetInfo(assetId).value()
  let assetName = asset.name.value()
   if containsElement(allArtefact, assetName) && asset.issuer == this
   then
      assetName
   else throw("Invalid artefact")
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())

func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),"static_breederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func manipulateName(assetName: String, position: Int, char: String) = {
  assetName.take(position-1)+char+assetName.takeRight(16-position)
}

func itemIsInCoolDown(artefactName: String, artefactId: String)={
  let unstakeHeightLast = tryGetInteger(keyUnstakeHeight(artefactName,artefactId))
  let cooldownPeriod = 240
  if unstakeHeightLast+cooldownPeriod < height
  then false
  else true
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func calculateFarmingPowerBoost(duckId: String, address: String)={
  let lakeBoost = if (tryGetString(keyArtefactOwner("ART-LAKE",address)) != "") then 2 else 0
  let xmasTreeBoost = if (tryGetString(keyArtefactOwner("ART-XTREE",address)) != "") then 3 else 0
  let scarfBoost = if (tryGetString(keyArtefactDuck("ART-XSCARF",duckId)) != "") then 69 else 0
  let totalBoost = lakeBoost+xmasTreeBoost+scarfBoost
  (
    [
      IntegerEntry(duckId+"_last_boost",totalBoost)
    ],
    totalBoost
  )
}

@Callable(i)
func fixedGene(txIdStr: String, parentFixedGene: Int, positionFixedGene: Int) = {
  let firstPayment = i.payments[0].value()
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if firstPayment.amount != 1 then throw("NFT is not attached") else
  let artefact = checkArtefactDetails(firstPayment.assetId.value())
  if artefact != "ART-FIXGENE" then  throw("You need to attach a ART-FIXGENE artefact") else

  let txId = fromBase58String(txIdStr)

  let finishHeightKey = getProcessFinishHeightKey(i.caller.toString(), txId)
  let processFinishHeight = getIntegerValue(getBreederAddress(), finishHeightKey)

  strict duckGenesString = invoke(getBreederAddress(),"generateDuck",[txIdStr, processFinishHeight,parentFixedGene,positionFixedGene,"",0],[]).asString()
  
  strict call = invoke(getBreederAddress(), "finishDuckHatchingItems", [txIdStr, duckGenesString], [])
  [
    Burn(firstPayment.assetId.value(),1)
  ]
}

@Callable(i)
func freeGene(txIdStr: String) = {
  let firstPayment = i.payments[0].value()
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if firstPayment.amount != 1 then throw("NFT is not attached") else
  let artefact = checkArtefactDetails(firstPayment.assetId.value())
  if artefact != "ART-FREEGENE" then  throw("You need to attach a ART-FREEGENE artefact") else
  
  let txId = fromBase58String(txIdStr)

  let finishHeightKey = getProcessFinishHeightKey(i.caller.toString(), txId)
  let processFinishHeight = getIntegerValue(getBreederAddress(), finishHeightKey)

  let selectedGene = getRandomGenes(txId,processFinishHeight)
  let randomPosition = getRandomNumber(7, txId, processFinishHeight, 3)

  strict duckGenesString = invoke(getBreederAddress(),"generateDuck",[txIdStr, processFinishHeight,0,0,selectedGene,randomPosition],[]).asString()
  
  strict call = invoke(getBreederAddress(), "finishDuckHatchingItems", [txIdStr, duckGenesString], [])
  [
    Burn(firstPayment.assetId.value(),1)
  ]
}

@Callable(i)
func copyDuck()= {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[firstAssetId],[]).asInt()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  let artefact = checkArtefactDetails(secondPayment.assetId.value())
  if artefact != "ART-MIRROR" then  throw("You need to attach a ART-MIRROR artefact") else
  let nftInfo = assetInfo(firstPayment.assetId.value()).value()
  let asset1Gen = nftInfo.name.split("")        
  if (asset1Gen[14] == "G" || asset1Gen[14] == "J" ) then  throw("You can't mirror this duck") else
    let duckGen = nftInfo.name
    strict call = invoke(getBreederAddress(), "createDuckSpecialGenes", [i.caller.bytes, duckGen,children], [])
    [
      ScriptTransfer(i.caller, 1, firstPayment.assetId),
      Burn(secondPayment.assetId.value(),1)
    ]

}


@Callable(i)
func wearItemToDuck() = {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let duckId = firstPayment.assetId.value().toBase58String()
  let secondAssetId = secondPayment.assetId.value().toBase58String()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[duckId],[]).asInt()
  let artefactName = checkArtefactDetails(secondPayment.assetId.value())
  if artefactName != "ART-XSCARF"  then  throw("You need to attach a ART-XSCARF artefact") else
    let artefactId = tryGetString(keyArtefactDuck(artefactName,duckId))
    if artefactId == ""
    then
    [
      StringEntry(keyArtefactDuck(artefactName,duckId), secondAssetId),
      ScriptTransfer(i.caller, 1, firstPayment.assetId)
    ]
    else throw("Duck is already wearing a "+artefactName)
}


@Callable(i)
func addArteFactToDuck()= {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[firstAssetId],[]).asInt()
  if children == 0 then throw("You can only pick a sterile NFT-duck") else
  let artefact = checkArtefactDetails(secondPayment.assetId.value())
  if artefact != "ART-XHAT" && artefact != "ART-POMP" then  throw("You need to attach a ART-XHAT or ART-POMP artefact") else
  let nftInfo = assetInfo(firstPayment.assetId.value()).value()
  let asset1Gen = nftInfo.name.split("")        
  if (asset1Gen[14] == "G" || asset1Gen[14] == "J" ) then  throw("You can't mirror this duck") else
  if (asset1Gen[5] == "S" || asset1Gen[5] == "T" ) then  throw("you already attached a artefact") else{

    let char = if artefact == "ART-XHAT" then "T" else if artefact=="ART-POMP" then "S" else throw("No char defined")
    let oldDuckGen = nftInfo.name
    strict oldFarmGen = invoke(getBreederAddress(),"getGenFromName",[oldDuckGen],[]).asString()
    let duckGen = manipulateName(oldDuckGen,6,char)
    strict call = invoke(getBreederAddress(), "createDuckSpecialGenes", [i.caller.bytes, duckGen,children], [])
    strict callReduce = invoke(getBreederAddress(), "reduceRarity", [firstAssetId,oldFarmGen], [])
    [
      Burn(firstPayment.assetId.value(),1),
      Burn(secondPayment.assetId.value(),1)
    ]
  }
}

@Callable(i)
func stakeItem() = {
    if (size(i.payments) == 1 && i.payments[0].amount==1) then {
      let assetId = i.payments[0].assetId.value()
      let artefactName = checkArtefactDetails(assetId) 
      if containsElement(allStakeable, artefactName)
      then  {
        if containsElement(stakeableWithLock, artefactName) && itemIsInCoolDown(artefactName,assetId.toBase58String()) then throw("Item can't be staked yet, it's in cooldown") else
        let invoker = i.caller.toString()
        let artefactId = tryGetString(keyArtefactOwner(artefactName,invoker))
        if artefactId == ""
        then
        [
          StringEntry(keyArtefactOwner(artefactName,invoker), assetId.toBase58String())
        ]
        else throw("You are already staking "+ artefactName)
      }
      else throw("You can't stake this artafect")
    } else {
        throw("Invalid payment")
    }
}

@Callable(i)
func unstakeItem(artefactName: String) = {
    if containsElement(allArtefact, artefactName) then{
      let invoker = i.caller.toString()
      let artefactId = tryGetString(keyArtefactOwner(artefactName,invoker))
      if artefactId == "" 
      then throw("You didnt stake "+artefactName)
      else{
        [
          IntegerEntry(keyUnstakeHeight(artefactName,artefactId),height),
          ScriptTransfer(i.caller,1,artefactId.fromBase58String()),
          DeleteEntry(keyArtefactOwner(artefactName,invoker))
        ]
      }
    }else throw("This artefact doesn't exist")
      
}


@Callable(i)
func preInit() = {
  [
    IntegerEntry("static_ART-LAKE_farmingSlots", 200),
    IntegerEntry("static_ART-LAKE_farmingBoost", 2),
    IntegerEntry("static_ART-HOUSE_farmingSlots", 4),
    IntegerEntry("static_ART-HOUSE_farmingBoost", 30),
    IntegerEntry("static_ART-BIGHOUSE_farmingSlots", 10),
    IntegerEntry("static_ART-BIGHOUSE_farmingBoost", 15)
  ]
}

@Callable(i)
func issueArtefact(type: String, receiver: String) = {
  if (i.caller == this) then {
    let txIdStr = i.transactionId.toBase58String()
    let address = Address(fromBase58String(receiver))

    let artefact = Issue(type, "NFT artefact of Waves Ducks game. Drop #2.", 1, 0, false, unit, 0)
    let artefactId = artefact.calculateAssetId()

    [
      artefact,
      StringEntry("artefact_" + artefactId.toBase58String() + "_type", type),
      ScriptTransfer(address, 1, artefactId)
    ]
  } else {
    throw("admin only")
  }
}

@Callable(i)
func setLock(n: Int) = {
  if (i.caller == this) then {
  [
    IntegerEntry("global_locked", n)
  ]
  } else {
    throw("admin only")
  }
}

@Callable(i)
func buyArtefact() = {
  if (lastBlock.timestamp > 1639742400000) then throw("There are no active sales now... ") else 
  if (tryGetInteger("global_locked") > 0) then {
    throw("contract is temporarily locked")
  } else if (tryGetInteger("global_artAmount") >= artefactsLimit) then {
    throw("SOLDOUT!!! Hurray!")
  } else if(lastBlock.timestamp < 1639605600000 && i.caller != Address(devAddress)) then throw("Too early...") else {

    let firstPayment = i.payments[0].value()
    if (firstPayment.assetId != getEggAssetId()) then throw("You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String())
    else if (firstPayment.amount < eggsNeeded)  then throw("To hatch a duck you currently need the following amount of EGGlets: " + eggsNeeded.toString())
    else {
      [
        StringEntry(i.caller.toString() + "_" + i.transactionId.toBase58String() + "_status", "started"),
        IntegerEntry(i.caller.toString() + "_" + i.transactionId.toBase58String() + "_finishHeight", height + 2),
        IntegerEntry("global_artAmount", tryGetInteger("global_artAmount") + 1)
      ]
    }
  }
}

@Callable(i)
func setGlobalArtAmount(newAmount: Int) = {
  if (i.caller == this || i.caller == Address(devAddress)) then {
    [IntegerEntry("global_artAmount", newAmount)]
  }else throw("Permission denied")
}

@Callable(i)
func claimArtefact(boxIdStr: String) = {
  let txId = fromBase58String(boxIdStr)
  let statusKey = i.caller.toString() + "_" + boxIdStr + "_status"
  let heightKey = i.caller.toString() + "_" + boxIdStr + "_finishHeight"

  if (getStringValue(statusKey) != "started") then {throw("claimed already")} 
  else if (getIntegerValue(heightKey) > height) then {throw("you cannot claim yet")}
  else {
    let artType = getRandomArtefact(txId, getIntegerValue(heightKey))

    let asset = Issue(artType, "Artefact of Waves Ducks metaverse.", 1, 0, false, unit, getIntegerValue(heightKey))
    let assetId = asset.calculateAssetId()

    [
      StringEntry(statusKey, artType),
      StringEntry(i.caller.toString() + "_" + boxIdStr + "_artefactId", assetId.toBase58String()),
      StringEntry(assetId.toBase58String() + "_type", artType),
      asset,
      ScriptTransfer(i.caller, 1, assetId)
    ]
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)


