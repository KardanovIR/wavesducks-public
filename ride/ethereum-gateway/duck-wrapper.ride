{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
  match getString(this, key) {
      case a:String => a
      case _ => ""
  }
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),"static_breederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),"static_itemsAddress").fromBase58String())
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),"static_farmingAddress").fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

#TODO: get those in the oracle
let nftCreationAddressGateway = base58'3P8LVqVKhTViMJau96KNir6FhHr4WnfoW57'
let nftGateway = base58'3PPfDHC6hNqDMxRArJvJRkYfC8y6S3rSnYb'


func tryGetInteger(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
      case _ => 0
  }
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func isJackpotDuck(assetNameParts: List[String]) = { assetNameParts[assetNameParts.size() - 2] == "J" }

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}

func getAssetOrigin(generation: String) = {
  if (generation == "G") then {getIncubatorAddress()} else {getBreederAddress()}
}

func getAssetRarity(genotype: String, generation: String) = {
  let quantity = getIntegerValue(getAssetOrigin(generation), "stats_"+genotype+"_quantity")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  if (power > 0) then {power} else {2}
}

func getAssetFarmingPower(assetId: ByteVector) = {
  if (assetInfo(assetId).value().issuer == getBreederAddress() || assetInfo(assetId).value().issuer == getIncubatorAddress()) then {  
    strict farmBoost = invoke(getItemsAddress(),"calculateFarmingPowerBoost",[assetId.toBase58String(),"UnusedAddress"],[]).asInt()
    let assetName = assetInfo(assetId).value().name
    let isJackpot = assetName.value().takeRight(1) == "U"

    strict farmGen = if isJackpot then "" else invoke(getBreederAddress(),"getGenFromName",[assetName],[]).asString()
    let rarity = if isJackpot then 100 else{
      let generation = assetName.takeRight(2).take(1)
      getAssetRarity(farmGen, generation)
    }


    let totalFarmingPower = rarity + fraction(rarity,farmBoost,100)
    (farmGen, totalFarmingPower )
  } else {
    throw("not valid NFT")
  }
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func lock() = {
  if (i.caller != Address(nftCreationAddressGateway)) then throw("DL: Not authorized!") else

  let addressStr = i.caller.toString()
  let assetId = i.payments[0].value().assetId.value()
  let assetIssuer = assetInfo(assetId).value().issuer
  let assetName = assetInfo(assetId).value().name.value()
  let assetNameParts = assetName.split("")
  let isJackpot = isJackpotDuck(assetNameParts)
  let assetColor = if (isJackpot) then {"G"} else {assetName.split("")[size(assetName.split(""))-1]}
  let assetRarity = getAssetFarmingPower(assetId)._2

  if (assetIssuer != getIncubatorAddress() && assetIssuer != getBreederAddress()) then { throw("invalid NFT attached") } 
  else {
    strict perchesAvailable = match getInteger(getFarmingAddress(), "address_" + this.toString() + "_perchesAvailable_" + assetColor) {
      case b:Int => b
      case _ => 0
    }
    let eggBalance = assetBalance(this, getEggAssetId())
    
    strict isOnPerch = if (assetRarity < 50 || (perchesAvailable == 0 && eggBalance < 1_0000_0000)) then {false} else {
      strict inv1 = if (perchesAvailable > 0) then { unit } else {
        invoke(getFarmingAddress(), "buyPerch", [assetColor, ""], [AttachedPayment(unit,1_000_000),AttachedPayment(getEggAssetId(), 1_0000_0000) ])
      }
      strict inv2 = if (perchesAvailable > 0) then { unit } else 
      if (isJackpot == false) then {
        invoke(getFarmingAddress(), "stakeNFT", [], [AttachedPayment(assetId, 1), AttachedPayment(unit,1_000_000)])
      } else {
        invoke(getFarmingAddress(), "stakeJackpot", [assetColor], [AttachedPayment(assetId, 1), AttachedPayment(unit,1_000_000)])
      }
      true
    }

    let sterileStr = match getInteger(getBreederAddress(), "asset_"+assetId.toBase58String()+"_children") {
      case x: Int => "Sterile"
      case _ => "Fertile"
    }
    let nameSuffix = assetRarity.toString() + "%"
    let imageLink = "https://wavesducks.com/api/v1/ducks/"+assetName.drop(5).dropRight(3)+".svg?onPerch="+isOnPerch.toString()+"&color="+assetColor
    let name = if (isOnPerch) then {"Staked Duck "+nameSuffix} else {"Waves Duck "+nameSuffix}

    strict stakedNFTIdStr = match (invoke(Address(nftCreationAddressGateway), "createNFT", [name, sterileStr + " Waves Duck " + assetName + " with rarity " + assetRarity.toString(), imageLink, "ducks"], [])) {
      case x: String => x
      case _ => throw("something went wrong during creation of NFT")
    }

    ([
      ScriptTransfer(i.caller, 1, stakedNFTIdStr.fromBase58String()),
      StringEntry("duck_" + assetId.toBase58String() + "_sduckId", stakedNFTIdStr),
      StringEntry("duck_" + assetId.toBase58String() + "_owner", addressStr),
      StringEntry("nft_" + stakedNFTIdStr + "_duckId", assetId.toBase58String()),
      IntegerEntry("address_" + addressStr + "_lockedDuck_" + assetId.toBase58String(), assetRarity)
    ], stakedNFTIdStr)
  }
}

@Callable(i)
func unlock() = {
  if (i.caller != Address(nftGateway)) then throw("DU: Not authorized!") else

  let addressStr = i.caller.toString()
  let stakedNFTId = i.payments[0].assetId.value()  # todo: check amount = 1
  let stakedNFTIdStr = stakedNFTId.toBase58String()
  let assetIdStr = tryGetString("nft_" + stakedNFTIdStr + "_duckId")
  let assetId = assetIdStr.fromBase58String()
  let assetName = assetInfo(assetId).value().name.value()
  let assetNameParts = assetName.split("")
  let isJackpot = isJackpotDuck(assetNameParts)
  let unstakeFuncName = if isJackpot == true then "unstakeJackpot" else "unstakeNFT"

  if (tryGetString("duck_" + assetIdStr + "_owner") != addressStr) then {throw("duck is not yours")} 
  else {
    strict assetBalanceBefore = assetBalance(this, getEggAssetId())
    strict inv1 = if (assetBalance(this, assetId) > 0) then {unit} else {invoke(getFarmingAddress(), unstakeFuncName, [assetIdStr], [AttachedPayment(unit,1_000_000)])}
    strict eggEarned = assetBalance(this, getEggAssetId()) - assetBalanceBefore

    strict inv2 = invoke(Address(nftCreationAddressGateway), "burnNFT", [], i.payments)

    ([
      ScriptTransfer(i.caller, 1, assetId),
      ScriptTransfer(i.caller, eggEarned, getEggAssetId()),
      DeleteEntry("address_" + addressStr + "_lockedDuck_" + assetIdStr), 
      DeleteEntry("nft_" + stakedNFTIdStr + "_duckId"),
      DeleteEntry("duck_" + assetIdStr + "_sduckId"),
      DeleteEntry("duck_" + assetIdStr + "_owner")
    ], assetIdStr)
  }
}
