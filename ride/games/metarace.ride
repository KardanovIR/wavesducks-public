{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# settings should be like: vehicle_{name}_name, vehicle_{name}_price, 

func tryGetInteger(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
      case _ => 0
  }
}

func keyDuckUnlockTime(assetId: ByteVector) = "duck_" + assetId.toBase58String() + "_unlockTime"
func keyDuckOwner(assetId: ByteVector) = "duck_" + assetId.toBase58String() + "_owner"
func keyVehicleBoostersLevel(assetId: String) = "vehicle_" + assetId + "_boostersLevel"
func keySpotsBought(addressStr: String) = "address_" + addressStr + "_spotsBought"
func keyTicketsBought(addressStr: String) = "address_" + addressStr + "_ticketsBought"
func keyVehicleTypePrice(name: String) = "vehicleType_" + name + "_price"
func keySpotsBusy(addressStr: String) = "address_" + addressStr + "_spotsBusy"
func keyLockedDuckStatus(addressStr: String, assetIdStr: String) = "address_" + addressStr + "_lockedDuck_" + assetIdStr + "_status"

func getDuckDetails(assetId: ByteVector) = {
  let assetName = assetInfo(assetId).value().name.value()
  let assetNameParts = assetName.split("")
  let isJackpot = assetNameParts[assetNameParts.size() - 2] == "J"
  # B because it is used to buy perches, so when jackpot any perch is accepted and B is bought
  let assetColor = if isJackpot then "B" else assetNameParts[assetNameParts.size() - 1]
  (
    assetColor, isJackpot
  )
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

#CUSTOM SETTINGS CONFIGURED BY ORACLE SETUP
func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getGameName() = getString("static_shortGameName").valueOrErrorMessage("3GGN: There is no game name defined!")
func getLongGameName() = getString("static_longGameName").valueOrErrorMessage("3GLGN: There is no long game name defined!")
func getNFTName() = getString("static_nftName").valueOrErrorMessage("3GNN: There is no nft name defined!")

#GENERIC SETTINGS READ FROM ORACLE
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),"static_breederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),"static_farmingAddress").fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

#GENERIC SETTINGS THAT NEED TO BE CONFIGURED MANUALLY
func getAccessItemAssetId() = tryGetString("static_accessItemAssetId").fromBase58String()
func getAccessItemPrice() = tryGetInteger("static_accessItemPrice")
func getMinLockDuration() = tryGetInteger("static_minLockDuration")
func getDefaultVehicleType() = tryGetString("static_defaultVehicleType")
func getBosterBuyAssetId() = tryGetString("static_boosterBuyAssetId").fromBase58String()


# DON'T USE tryGetInteger because it can return 0 as price for booster
func getBosterPriceForLevel(level: Int) = getInteger("static_boosterPriceLevel_" + level.toString()).valueOrErrorMessage("3GBPFL: There is no price value for this level of booster")
func getBosterNameForLevel(level: Int) = getString("static_boosterName_" + level.toString()).valueOrErrorMessage("3GBNFL: There is no such booster")

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("3AS: wrong type, expected: String")
}

func getDefaultVehicleAsset() = {
  Asset(base58'1', 1, 0, this, base58'1', false, false, unit, getDefaultVehicleType(), "[Vehicle] " + getDefaultVehicleType())
}

func lockDuckInternal(addressStr:String, pmt: AttachedPayment)={
  let assetId = pmt.assetId.value()
  let assetIssuer = assetInfo(assetId).value().issuer
  let tDuckDetails = getDuckDetails(assetId)
  let assetColor = tDuckDetails._1
  let isJackpot = tDuckDetails._2
  # let assetRarity = getAssetFarmingPower(assetId)._2

  let kSpotsBusy = keySpotsBusy(addressStr)
  let spotsBusy = tryGetInteger(kSpotsBusy)
  let kSpotsBought = keySpotsBought(addressStr)

  let addressSpotsAvailable = tryGetInteger(kSpotsBought) - spotsBusy

  if (pmt.amount != 1) then throw("NFT is not attached") else 
  if (assetIssuer != getIncubatorAddress() && assetIssuer != getBreederAddress()) then { throw("ivalid NFT attached") } 
  else if (addressSpotsAvailable <= 0) then { throw("No spots available") }
  else {
    let kPerchesAvailable = "address_" + this.toString() + "_perchesAvailable_" + assetColor
    strict perchesAvailable = match getInteger(getFarmingAddress(), kPerchesAvailable) {
      case b:Int => b
      case _ => 0
    }

    let eggAssetId = getEggAssetId()

    strict inv1 = if (perchesAvailable > 0) then { unit } else {
      invoke(getFarmingAddress(), "buyPerch", [assetColor, ""], [AttachedPayment(eggAssetId, 1_0000_0000)])
    }

    strict inv2 = if isJackpot == false then 
      invoke(getFarmingAddress(), "stakeNFT", [], [AttachedPayment(assetId, 1)])  else
      invoke(getFarmingAddress(), "stakeJackpot", [assetColor], [AttachedPayment(assetId, 1)])

    [
      IntegerEntry(kSpotsBusy, spotsBusy + 1),
      StringEntry(keyDuckOwner(assetId), addressStr),
      BooleanEntry(keyLockedDuckStatus(addressStr, assetId.toBase58String()), true),
      IntegerEntry(keyDuckUnlockTime(assetId), lastBlock.timestamp + getMinLockDuration())
    ]
  }
}

func unstakeDuck(assetIdStr: String, addressStr: String)={
  let assetId = assetIdStr.fromBase58String()

  let tDuckDetails = getDuckDetails(assetId)
  let assetColor = tDuckDetails._1
  let isJackpot = tDuckDetails._2

  let kSpotsBusy = keySpotsBusy(addressStr)
  let kDuckOwner = keyDuckOwner(assetId)

  let remainingForUnlock = tryGetInteger(keyDuckUnlockTime(assetId)) - lastBlock.timestamp

  if (tryGetString(kDuckOwner) != addressStr) then {throw("3UL: The duck is not yours")} 
  else if (remainingForUnlock > 0) then {throw("3UL: You need to wait to unlock " + (remainingForUnlock / 1000).toString() + " seconds")}
  else {
    let unstakeFuncName = if isJackpot == true then "unstakeJackpot" else "unstakeNFT" 
    strict inv1 = invoke(getFarmingAddress(), unstakeFuncName, [assetIdStr], [])  # TODO: jackpot unstaking
    [
      ScriptTransfer(Address(addressStr.fromBase58String()), 1, assetId),
      DeleteEntry(keyLockedDuckStatus(addressStr, assetIdStr)), 
      DeleteEntry(kDuckOwner), 
      IntegerEntry(kSpotsBusy, tryGetInteger(kSpotsBusy) - 1)
    ]
  }
}

func getVehicleName (type: String) = {
  this.getStringValue("static_vehicle_" + type + "_name")
}


func getVehiclePrice (type: String) = {
  tryGetInteger("static_vehicle_" + type + "_price")
}

func mintVehicleInternal(type: String, recipient: Address, boostersLevel: Int) = {
  let vehicleItem = Issue(type, "[Vehicle] " + type + " vehicle for the Metarace game. https://metarace.com", 1, 0, false)
  let vehicleItemAssetId = vehicleItem.calculateAssetId()
  [
    vehicleItem,
    IntegerEntry(keyVehicleBoostersLevel(vehicleItemAssetId.toBase58String()), boostersLevel),
    ScriptTransfer(recipient, 1, vehicleItemAssetId)
  ]
}

func updateSettingInternal(i: Invocation, key: String, value: Int | String | Boolean | ByteVector) = {
  if (i.caller != this) then throw("Only administrator can call this method") else {
    match (value) {
        case int: Int => [IntegerEntry(key, int)]
        case s: String => [StringEntry(key, s)]
        case b: Boolean => [BooleanEntry(key, b)]
        case bv: ByteVector => [BinaryEntry(key, bv)]
        case _ => throw("Bad value type")
      }
  }
}

@Callable(i)
func buyAccessItemInternal(addressStr:String)= {
    if i.caller != this then throw("3BAII: internal use only") else 
    let issueAccessItem = Issue("ACCESS-"+getGameName(), "[Access] "+getLongGameName()+" access NFT for "+getNFTName(), 1, 0, false)
    let accessRaceAssetId = issueAccessItem.calculateAssetId().toBase58String()
    let kSpotsBought = keySpotsBought(addressStr)
    ([
      issueAccessItem,
      StringEntry("accessItem_" + accessRaceAssetId + "_owner", addressStr),
      StringEntry("address_" + addressStr + "_owning", accessRaceAssetId),
      IntegerEntry(kSpotsBought, tryGetInteger(kSpotsBought) + 1)
    ],
    accessRaceAssetId)
  
}

@Callable(i)
func configureOracle(oracle: String, shortname: String, longname: String, nftName: String) = {
  if i.caller != this then throw("3CO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle),
    StringEntry("static_shortGameName",shortname),
    StringEntry("static_longGameName",longname),
    StringEntry("static_nftName",nftName)
  ]
}

@Callable(i)
func updateSettingInt(key: String, value: Int) = {
  updateSettingInternal(i,key, value)
}

@Callable(i)
func updateSettingStr(key: String, value: String) = {
  updateSettingInternal(i,key, value)
}

@Callable(i)
func updateSettingBoolean(key: String, value: Boolean) = {
  updateSettingInternal(i,key, value)
}

@Callable(i)
func updateSettingByteVector(key: String, value: ByteVector) = {
  updateSettingInternal(i,key, value)
}


@Callable(i)
func deleteSetting(key: String) = {
    if (i.caller != this) then throw("3DS: Only administrator can call this method")
    else [DeleteEntry(key)]
}

@Callable(i)
func buyVehicle(typeName: String) = {
  let price = getVehiclePrice(typeName)
  let pmt = value(i.payments[0])
  let expectedAssetId = getBosterBuyAssetId()
  if (price == 0) then throw("There is no such vehicle type") else
  if (pmt.amount != price) then throw("3BB: Bad price, it should be: " + price.toString()) else 
  if (pmt.assetId != expectedAssetId) then throw("3BB: Bad payment attached, it should be $RACE token with asset id: " + expectedAssetId.toBase58String())
  else {
    mintVehicleInternal(typeName, i.caller, 0)
  }
}

@Callable(i)
func buyBooster(assetId: String) = {
  let kBoughtLevel = keyVehicleBoostersLevel(assetId)
  let boughtBoosterLevel = tryGetInteger(kBoughtLevel)
  let newLevel = boughtBoosterLevel + 1
  let pmt = i.payments[0].value()
  let price = getBosterPriceForLevel(newLevel)
  let expectedAssetId = getBosterBuyAssetId()
  let vehicleDetails = assetInfo(assetId.fromBase58String()).valueOrElse(getDefaultVehicleAsset())
  if (vehicleDetails.issuer != this) then throw("This asset is not a vehicle") else 
  if (vehicleDetails.description.value().contains("[Vehicle]") == false) then throw("This asset is not a vehicle") else
  if (pmt.amount != price || price == 0) then throw("3BB: Bad price, it should be: " + price.toString()) else 
  if (pmt.assetId != expectedAssetId) then throw("3BB: Bad payment attached, it should be: " + expectedAssetId.toBase58String())
  else {
    if (assetId == "") then {
      mintVehicleInternal(getDefaultVehicleType(), i.caller, 1)
    } else {
      [IntegerEntry(kBoughtLevel, newLevel)]
    }
  }
}

@Callable(i)
func buyManyBoosters (assetId: String, newDesiredLevel: Int) = {
    let kBoughtLevel = keyVehicleBoostersLevel(assetId)
    let boughtBoosterLevel = tryGetInteger(kBoughtLevel)

    func accumulateBoosterPrices(accum: Int, levelToPurchase: Int) = {
      if (levelToPurchase <= boughtBoosterLevel || levelToPurchase > newDesiredLevel) then accum
      else {
        let boosterPrice = getBosterPriceForLevel(levelToPurchase)
        accum + boosterPrice
      }
    }

    
    let totalPrice = FOLD<11>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 0, accumulateBoosterPrices)
    let pmt = value(i.payments[0])
    let expectedAssetId = getBosterBuyAssetId()


    let vehicleDetails = assetInfo(assetId.fromBase58String()).valueOrElse(getDefaultVehicleAsset())
    if (vehicleDetails.issuer != this) then throw("This asset is not a vehicle") else 
    if (vehicleDetails.description.value().contains("[Vehicle]") == false) then throw("This asset is not a vehicle") else
    if (boughtBoosterLevel >= newDesiredLevel) then {throw(("3BB: Booster was already bought"))}
    else if (pmt.amount != totalPrice)
      then {throw(("3BB: Bad price, it should be: " + toString(totalPrice)))}
      else if ((pmt.assetId != expectedAssetId))
          then {throw(("3BB: Bad payment attached, it should be: " + toBase58String(expectedAssetId)))}
          else {
            if (assetId == "") then {
              mintVehicleInternal(getDefaultVehicleType(), i.caller, newDesiredLevel)
            } else {
              [IntegerEntry(kBoughtLevel, newDesiredLevel)]
            }
          }
  }

@Callable(i)
func buyTickets() = {
  let kTicketsBought = keyTicketsBought(i.caller.toString())
  let ticketsBought = tryGetInteger(kTicketsBought)
  let pmt = i.payments[0]

  let expectedAssetId = getBosterBuyAssetId()
  let newTicketsBought = pmt.amount / 1_000_000_00
  
  if (pmt.assetId != expectedAssetId) then throw("3BC: Wrong asset attached") else
  [
    IntegerEntry(kTicketsBought, ticketsBought + newTicketsBought)
  ]
}

@Callable(i)
func buyAccessItemAndLockDuck()={
  let eggPayment = i.payments[0].value()
  let duckPayment = i.payments[1].value()
  let addressStr = i.caller.toString()
  if (eggPayment.assetId != getAccessItemAssetId()) then {throw("3BAI: Wrong asset attached")} else 
  if (eggPayment.amount != getAccessItemPrice()) then {throw("3BAI: Wrong amount of assets attached")} else
  strict accessItemData = invoke(this, "buyAccessItemInternal", [addressStr], []).asString()
  let lockData = lockDuckInternal(addressStr,duckPayment)

  (lockData, accessItemData)
}

@Callable(i)
func buyAccessItem() = {
  let addressStr = i.caller.toString()
  let eggPayment = i.payments[0].value()
  if (eggPayment.assetId != getAccessItemAssetId()) then {throw("3BAI: Wrong asset attached")} else 
  if (eggPayment.amount != getAccessItemPrice()) then {throw("3BAI: Wrong amount of assets attached")} else
  strict accessItemData = invoke(this, "buyAccessItemInternal", [addressStr], []).asString()
  ([], accessItemData)
}

@Callable(i)
func buyAccessItemOther(addressOther: String) = {
  let eggPayment = i.payments[0].value()
  if (eggPayment.assetId != getAccessItemAssetId()) then {throw("3BAI: Wrong asset attached")} else 
  if (eggPayment.amount != getAccessItemPrice()) then {throw("3BAI: Wrong amount of assets attached")} else
  strict accessItemData = invoke(this, "buyAccessItemInternal", [addressOther], []).asString()
  ([], accessItemData)
}

@Callable(i)
func lockDuck() = {
  let addressStr = i.caller.toString()
  let duckPayment = i.payments[0].value()
  lockDuckInternal(addressStr,duckPayment)
}

@Callable(i)
func unlockDuckOther(assetIdStr: String)={
  if i.caller != this then throw("3UDO: Admin only!") else
  let ownerKey = tryGetString(keyDuckOwner(assetIdStr.fromBase58String()))
  unstakeDuck(assetIdStr, ownerKey)
}

@Callable(i)
func mintLawnMowerForLegacyBoosters(address: String) = {
  let k = "address_" + address + "_boughtBoosterLevel"
  let currentLevel = tryGetInteger(k)
  if (currentLevel == 0 ) then throw("There is no booster for the user") else {
    mintVehicleInternal("LawnMower", address.addressFromStringValue(), currentLevel) ++ [
      DeleteEntry(k)
    ]
  }
  
}

@Callable(i)
func unlockDuck(assetIdStr: String) = {
  let addressStr = i.caller.toString()
  unstakeDuck(assetIdStr, addressStr)
}
        
