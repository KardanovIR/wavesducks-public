{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let RewardMantle = "Mantle"
let RewardPerch = "Perch"

# DEV
#let farmingContract = base58'3PH75p2rmMKCV2nyW4TsAdFgFtmc61mJaqA'
#let gameContract = base58'3PCoF5ZnsQJKAJJCoSqUcVVqJ2Dm4fvn9ar'

# PROD
let farmingContract = base58'3PAETTtuW7aSiyKtn9GuML3RgtV1xdq1mQW'
let gameContract = base58'3PR87TwfWio6HVUScSaHGMnFYkGyaVdFeqT' 

func getInt(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
     case _ => 0
  }
}

func getStr(key: String) = {
  match getString(this, key) {
      case b:String => b
      case _ => ""
  }
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func getRewardForUser(address: String) = {
  let claimed = getBool("reward_" + address + "_claimed")
  if claimed then throw("You already claimed") else
  (getStr("reward_" + address + "_type"), claimed)
}

@Callable(i)
func claimPerch(color: String) = {
  let callerAddress = i.caller.toString()
  let (rewardType, rewardClaimed) = getRewardForUser(callerAddress)
  if (rewardType != RewardPerch) then throw("You don't have perch reward") else {
    strict freePerch = invoke(Address(farmingContract), "addFreePerch", [callerAddress, color], [])
    [
      BooleanEntry("reward_" + callerAddress + "_claimed", true)
    ]
  }
}

@Callable(i)
func claimMantle(choise: String, collectiveFarmAssetId: String) = {
  let callerAddress = i.caller.toString()
  let (rewardType, rewardClaimed) = getRewardForUser(callerAddress)
  if (rewardType != RewardMantle) then throw("You don't have mantle reward") else {
    let res = [
      BooleanEntry("reward_" + callerAddress + "_claimed", true)
    ]
    if (choise == "mantle") then {
      strict freeMantleIssue = invoke(Address(gameContract), "issueFreeMantle", [i.caller.toString(), "mantle", 2, 2000000], [])
      res
    }else {
      res ++ [ScriptTransfer(i.caller, 4000000, collectiveFarmAssetId.fromBase58String())]
    }
  }
}
