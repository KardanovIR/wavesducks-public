{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func asByteVector(value: Any) = match value {
  case byteVector: ByteVector => byteVector
  case _ => throw("AAS: wrong type, expected: byteVector")
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getMarketplaceAddress() = Address(tryGetStringExternal(getOracle(),"static_marketplaceAddress").fromBase58String())
func getHuntAddress() = Address(tryGetStringExternal(getOracle(),"static_huntAddress").fromBase58String())

func getAccessItemAssetId() = valueOrErrorMessage(getString(getHuntAddress(),"static_accessItemAssetId"),"Can not find access item id in "+getHuntAddress().toString()).fromBase58String()
func getAccessItemPrice() = tryGetIntegerExternal(getHuntAddress(),"static_accessItemPrice")

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("ACO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}



@Callable(i)
func buyAndSendToHunt(auctionId: String) ={
    strict duckBuying = invoke(getMarketplaceAddress(), "instantBuy", [auctionId], [i.payments[0]]).asByteVector()
    strict sendToHuntData = invoke(getHuntAddress(), "lockDuck", [], [AttachedPayment(duckBuying,1)])
    [StringEntry("DEBUG",auctionId+" "+duckBuying.toBase58String())]
}

@Callable(i)
func buyDuckAndARAndSendToHunt(auctionId: String) ={
  if size(i.payments)!=2 then throw("ABD: Please make sure to attach 2 payments!") else
  if i.payments[1].assetId != getAccessItemAssetId() then throw("ABD: Wrong asset id! "+i.payments[1].assetId.value().toBase58String()+" "+getAccessItemAssetId().toBase58String())else
  if i.payments[1].amount != getAccessItemPrice() then throw("ABD: Wrong Amount attached! "+i.payments[1].amount.toString()+" "+getAccessItemPrice().toString())else
    strict duckBuying = invoke(getMarketplaceAddress(), "instantBuy", [auctionId], [i.payments[0]]).asByteVector()
    strict sendToHuntData = invoke(getHuntAddress(), "buyAccessItemAndLockDuck", [], [
      i.payments[1],
      AttachedPayment(duckBuying,1)
      ])
  
        [StringEntry("DEBUG",auctionId+" "+duckBuying.toBase58String())]

}
