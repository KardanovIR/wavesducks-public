{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger (key: String) = {
    tryGetIntegerExternal(this, key)
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

#KEYS
func getVoteHeightKey(identifier: String) = "VOTE_HEIGHT_START_"+identifier
func getActiveVoteIdentifierKey() = "CURRENT_VOTE_IDENTIFIER"
func getDurationKey()= "VOTE_DURATION"
func getVotePowerKey(address: String)= "user_"+address+"_vote-power"

#ORACLE DATA
func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String()
func getDuration() = if tryGetIntegerExternal(getOracle(),getDurationKey() ) == 0 then 10000 else tryGetIntegerExternal(getOracle(), getDurationKey())

#STORAGE DATA
func getVoteHeight(identifier: String) = tryGetInteger(getVoteHeightKey(identifier))
func getActiveVoteIdentifier() =  tryGetString(getActiveVoteIdentifierKey())
func getVotePower(address: String) = tryGetInteger(getVotePowerKey(address))

func voteIsActive()={
      let identifier =getActiveVoteIdentifier()
      if identifier =="" then false else
      let voteHeight = getVoteHeight(identifier)
      voteHeight+getDuration() > height
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}



@Callable(i)
func startVote(identifier: String) ={
    if(i.caller!=getOracle()) then throw("ESV: Only the admin can start a vote for now!") else
    if voteIsActive() then throw("CSV: There is already a vote running!") else
    [
      StringEntry("CURRENT_VOTE_IDENTIFIER", identifier),
      IntegerEntry("VOTE_HEIGHT_START_"+identifier,height)
    ]
}


@Callable(i)
func voteTrueOrFalse(vote: Boolean)={
  #Check if vote is running
  #If vote is running, get last active identifier
  #If no vote is running, throw error
  #Check if user has FP, if no FP then dont let a user vote
  #Register a user his true or false boolean for the specifique vote identifier
  #Count how much people voted
  []
}

@Callable(i)
func finalizeVote(identifier: String, wallets: String)={
  #Check if vote is finished
  #Loop through the wallets, get there FP+ vote
  ## Check if user is not processed yet
  ## Add fp to either true or false variable name
  ## Mark a fp user vote as processed.
  ## Count how much wallets are processed
  ## If processed= voted then process result
  #Reset identifier and start height to empty
  #IMPORTANT: It should be possible to run it infinite of times without issues or duplicate results
  []
}