{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func tryGetInteger (key: String) = {
    tryGetIntegerExternal(this, key)
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

#KEYS
func getVoteHeightKey(identifier: String) = "VOTE_HEIGHT_START_"+identifier
func totalVoted(identifier: String) = "AMOUNT_VOTES_"+identifier
func totalProcessed(identifier: String) = "AMOUNT_VOTES_PROCESSED_"+identifier
func getActiveVoteIdentifierKey() = "CURRENT_VOTE_IDENTIFIER"
func getDurationKey()= "VOTE_DURATION"
func getVotePowerKey(address: String)= "user_"+address+"_vote-power"
func getUserVoteForIdentifierKey(address: String, identifier: String) = "user_"+address+"_identifier_"+identifier+"_vote"
func getUserProcessedForIdentifierKey(address: String, identifier: String) = "user_"+address+"_identifier_"+identifier+"_processed"
func getVotesForIdentifierAndOptionKey(identifier: String, option: String) = "total_votes_"+identifier+"_option_"+option

#ORACLE DATA
func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String()
func getDuration() = if tryGetIntegerExternal(getOracle(),getDurationKey() ) == 0 then 10000 else tryGetIntegerExternal(getOracle(), getDurationKey())

#STORAGE DATA
func getVoteHeight(identifier: String) = tryGetInteger(getVoteHeightKey(identifier))
func getActiveVoteIdentifier() =  tryGetString(getActiveVoteIdentifierKey())
func getVotePower(address: String) = tryGetInteger(getVotePowerKey(address))
func getUserVotePower(address: String) = tryGetInteger(getVotePowerKey(address))
func getUserVoteForIdentifier(address: String, identifier: String)= tryGetString(getUserVoteForIdentifierKey(address,identifier))
func getTotalVoted(identifier: String) = tryGetInteger(totalVoted(identifier))
func getTotalProcessed(identifier: String) = tryGetInteger(totalProcessed(identifier))
func getUserProcessedForIdentifier(address: String, identifier: String) = tryGetBoolean(getUserProcessedForIdentifierKey(address, identifier))
func getVotesForIdentifierAndOption(identifier: String, option: String) = tryGetInteger(getVotesForIdentifierAndOptionKey(identifier, option))

func voteIsActive()={
      let identifier =getActiveVoteIdentifier()
      if identifier =="" then false else
      let voteHeight = getVoteHeight(identifier)
      voteHeight+getDuration() > height
}



func voteProcessing(i: Invocation, vote: Boolean)={
  if !voteIsActive() then throw("FVP: No vote is currently running") else 
  let identifier =getActiveVoteIdentifier()
  let fpUser = getUserVotePower(i.caller.toString())
  if fpUser == 0 then throw("FVP: Please stake some ducks first!") else
  let oldVote = getUserVoteForIdentifier(i.caller.toString(), identifier)
  let uniqueVotes = if oldVote == "" then getTotalVoted(identifier)+1 else getTotalVoted(identifier)
  [
    IntegerEntry(totalVoted(identifier), uniqueVotes),
    StringEntry(getUserVoteForIdentifierKey(i.caller.toString(),identifier),vote.toString())
  ]
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}



@Callable(i)
func startVote(identifier: String) ={
    if(i.caller!=getOracle()) then throw("ESV: Only the admin can start a vote for now!") else
    if voteIsActive() then throw("CSV: There is already a vote running!") else
    [
      StringEntry("CURRENT_VOTE_IDENTIFIER", identifier),
      IntegerEntry("VOTE_HEIGHT_START_"+identifier,height)
    ]
}


@Callable(i)
func voteYes()={
  voteProcessing(i,true)
}

@Callable(i)
func voteNo()={
  voteProcessing(i,false)

}

@Callable(i)
func calculateVotes(wallets: String)={
  let identifier = getActiveVoteIdentifier()
  if identifier == "" then throw("FCV: No active vote running!") else
  let voteHeight = getVoteHeight(identifier)
  if voteHeight+getDuration() > height then throw("FFV: Vote is not finished yet!") else 


  let walletsList = wallets.split(";")
    func handleVoters(acc: List[IntegerEntry|BooleanEntry], voter: String) = {
        let user = voter
        if getUserProcessedForIdentifier(user,identifier) then throw("FCV: "+user+" is already processed!") else
        let userFP = getUserVotePower(user)
        let vote =getUserVoteForIdentifier(user,identifier)
        if vote == "" then throw("FCV: "+user+" did not vote!") else
        let voteKey = getVotesForIdentifierAndOptionKey(identifier,vote)
        let currentVoteAmount = getVotesForIdentifierAndOption(identifier,vote)



        acc++[
          BooleanEntry(getUserProcessedForIdentifierKey(user,identifier), true),
          IntegerEntry(voteKey,currentVoteAmount+userFP)
        ]

    }
    let result =  FOLD<20>(walletsList, [], handleVoters)
    let newTotalProcessed = getTotalProcessed(identifier)+size(walletsList)
    result++[
      IntegerEntry(totalProcessed(identifier), newTotalProcessed)
    ]

  
}

@Callable(i)
func finalizeVote()={
    let identifier = getActiveVoteIdentifier()
    if identifier == "" then throw("FFV: No active vote running!") else
    let voteHeight = getVoteHeight(identifier)
    if voteHeight+getDuration() > height then throw("FFV: Vote is not finished yet!") else 

    let finishVote = getTotalProcessed(identifier) == getTotalVoted(identifier)
    if !finishVote then throw("FFV: Vote is not counted yet!") else
    let result = getVotesForIdentifierAndOption(identifier, "true") > getVotesForIdentifierAndOption(identifier, "false")

    [
      DeleteEntry(getActiveVoteIdentifierKey()),
      StringEntry("RESULT_"+identifier,result.toString())
    ]

    
}