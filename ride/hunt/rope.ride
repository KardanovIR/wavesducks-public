{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#payment;
#eggId;price;distance + signature
#distance below 1km => check it
#eggId => only onique
func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_backendPubKey() = "static_backendPubKey"

func eggIdKey(eggId: String, user: String) = "eggId_"+eggId+"_"+user

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String()
func getBackendPubKey() = getStringValue(getOracle(),staticKey_backendPubKey()).fromBase58String()
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())


func getBackendProof(eggId: String, price: Int, distance: Int) = {
  makeString([eggId, price.toString(), distance.toString()], ";")
}

func checkAdditionalPayment(payment: AttachedPayment, amount: Int)= {
  if isDefined(payment.assetId) then throw("RCAP: Please attach waves") else
  if payment.amount != amount then throw("RCAP: Please attach exactly "+amount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), amount, unit)]

}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCO: admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func buyRope(eggId: String, price: Int, distance: Int, backendSignature: String)={

  let addressString = i.caller.toString()
  let backendProof = getBackendProof(eggId, price, distance)
  let exists = tryGetString(eggIdKey(eggId, i.originCaller.toString()))
  let halfPrice = price/2
  strict validPayment = checkAdditionalPayment(i.payments[1],price)
  if (!sigVerify_8Kb(backendProof.toBytes(), backendSignature.fromBase58String(), getBackendPubKey())) then throw("RBR: Invalid proof from backend") else
    if distance > 1000 then throw("RBR: You can only maximum boost 1000meters distance!") else
    let firstPayment = i.payments[0].value()
    let amount = firstPayment.amount
    if (firstPayment.assetId != getEggAssetId()) then throw("RBR: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else
    if amount != halfPrice then throw("RBR: Please attach the exact asset amount"+price.toString()) else
    if exists != "" then throw("RBR: Rope was already bought for this egg by this user!") else
    [
        StringEntry(eggIdKey(eggId, i.originCaller.toString()),price.toString()+";"+distance.toString())
    ]++validPayment
}