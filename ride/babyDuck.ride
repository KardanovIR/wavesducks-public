{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getDucklingPrice() = tryGetIntegerExternal(getOracle(),"static_ducklingPrice")
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getSpiceAssetId() = tryGetStringExternal(getOracle(),"static_spiceAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),"static_rebirthAddress").fromBase58String())
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),"static_couponsAddress").fromBase58String()) 
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())

let backendPubKey = getStringValue(getOracle(),"static_backendPubKey").fromBase58String()

let DUCKLINGPRICE = 1_0000_0000
let percentGrowthPrecision = 1_0000_0000_0000_0000
let existingDuckPrecision = 1_00_0000_0000_0000
let KGlobalIssuedTimestamp = "global_issued_timestamp"


let DUCKLINGPRICEOLD = 8000_0000
let percentGrowthPrecisionOld = 1_0000_0000_0000_0000

func keyTotalFeedOld(ducklingId: String) = {
  "duckling_" + ducklingId + "_feed"
}

func keyTotalFeed(ducklingId: String) = {
  "duckling_" + ducklingId + "_feed_spice"
}

func keyTotalFeedUser(address: String) = {
  "user_" + address + "_feed"
}

func keyAddressNonce(address: String) = {
  "address_" + address + "_nonce"
}

func keyDucklingLevel(ducklingId: String) = {
  "duckling_" + ducklingId + "_level"
}

func keyDucklingGrown(ducklingId: String) = {
  "duckling_" + ducklingId + "_grown"
}

func keyStartPercentage(ducklingId: String) = {
  "duckling_" + ducklingId + "_startPercentage"
}

func keyOwner(ducklingId: String) ={
  "duckling_" + ducklingId + "_owner"
}

func keyBlacklisted(ducklingId: String) ={
  "duckling_" + ducklingId + "_blacklisted"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func getDucklingPercentage(ducklingId: String)={
          let percentageDuckling = tryGetInteger(keyStartPercentage(ducklingId))
          let base = if percentageDuckling != 0 then percentageDuckling else 20 
          (base * existingDuckPrecision).toBigInt() # duckling from rebirth
}

func getCurrentLevelBigInt(ducklingId: String) = {
  let kDuckLevel = keyDucklingLevel(ducklingId)

  match (getString(kDuckLevel)){
    case s: String => s.parseBigIntValue()
    case _ => {
      match getBoolean("duckling_" + ducklingId + "_issuedByFeedCall") {
        case b:Boolean => if b==true && tryGetInteger(keyStartPercentage(ducklingId)) == 0 then 0.toBigInt() else getDucklingPercentage(ducklingId)
        case _ => getDucklingPercentage(ducklingId)
      }
    }
  }
}

# ducklingGrowthLevel counted with precision BigInt
func calculateNewDucklingLevel(ducklingId: String, paymentAmount: Int) = {

  let currentTs = lastBlock.timestamp
  let growth = fraction(paymentAmount.toBigInt(), percentGrowthPrecision.toBigInt(), DUCKLINGPRICE.toBigInt())
  let currentLevel = getCurrentLevelBigInt(ducklingId)
  let newLevel = currentLevel+growth
  let result = newLevel.toString()
  (result, ["currentLevel=" + currentLevel.toString(), "newLevel=" + newLevel.toString(), "growth=" + growth.toString()])
}

func getBackendProof(maxFeedAmount: Int, userNonce: Int, address: String) = {
  makeString([maxFeedAmount.toString(), userNonce.toString(), address], ";")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("BAI: wrong type, expected: Int")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("BCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}



@Callable(i)
func buyDuckling()={
  let exactPrice = getDucklingPrice()
  if exactPrice < 50000000 then throw("BBD: Invalid price from oracle!") else
  strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[exactPrice],[]).asInt()
  let leftToPay = exactPrice-amountPaidByCoupons

  strict payment = if leftToPay!=0 then {
    let firstPayment = i.payments[0].value()

    if (firstPayment.assetId != getEggAssetId()) then throw("BBD: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else 
    if (firstPayment.amount != leftToPay) then throw("BBD: To buy a perch you currently need the following amount of EGGlets: " + leftToPay.toString()) else
    strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),leftToPay)])
        
        leftToPay
    }else 0
  
  strict ducklingAssetId = invoke(this, "issueFreeDuckling", [i.originCaller.toString(), i.transactionId.toBase58String(),0], [])
  []

}

@Callable(i)
func issueFreeDuckling(address: String, txIdStr: String, percentage: Int) = {
  if i.caller != this && i.caller != getRebirthAddress() then throw("BIFD: You can't issue free duckling") else
  let asset = Issue("BABY-11111111-GZ", "", 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()
    ([
      StringEntry(address + "_" + txIdStr + "_di", assetId.toBase58String()),
      IntegerEntry("stats_amount", tryGetInteger("stats_amount") + 1),
      IntegerEntry(keyStartPercentage(assetId.toBase58String()), percentage),
      StringEntry(keyOwner(assetId.toBase58String()),address ),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
}

# backendProof should be maxFeedAmount;userNonce;address
# user nonce should be an incremented value
@Callable(i)
func feedDuckling(ducklingId: String, backendSignature: String, maxFeedAmount: Int, userNonce: Int) = {
  let addressString = i.caller.toString()
  let backendProof = getBackendProof(maxFeedAmount, userNonce, addressString)
  let kAddressNonce = keyAddressNonce(addressString)
  let currentNonce = tryGetInteger(kAddressNonce)


  let realDucklingId = if (!sigVerify_8Kb(backendProof.toBytes(), backendSignature.fromBase58String(), backendPubKey)) then throw("BFD: Invalid proof from backend") else 
    if (i.payments.size() != 1 || i.payments[0].value().assetId != getSpiceAssetId()) then throw("BFD: Bad payment attached (asset[s] or amount)") else 
    if (getBool(keyDucklingGrown(ducklingId))) then throw("BFD: Duckling is already grown") else 
    if (userNonce != currentNonce + 1) then throw("BFD: User Nonce should be " + currentNonce.toString() + " + 1, while received " + userNonce.toString()) else 
      let blackListed = tryGetBoolean(keyBlacklisted(ducklingId))
      if blackListed then throw("BFD: Can not feed blacklisted duckling!") else 
      if (ducklingId == "") then throw("BFD: Please buy a duckling first!") else 
        let ducklingIdCheck = assetInfo(ducklingId.fromBase58String()).value()
        if (assetBalance(i.caller, ducklingIdCheck.id) != 1) then throw("BFD: You're not the owner of the duckling") else
        if (ducklingIdCheck.issuer != this) then throw("BFD: Cant find duckling with such id") else
          ducklingIdCheck.id.toBase58String()
  

  let currentPayment = i.payments[0].value().amount
  let kNewLevel = keyDucklingLevel(realDucklingId)
  let kTotalFeed = keyTotalFeed(realDucklingId)
  let kTotalFeedUser = keyTotalFeedUser(addressString)
  let totalFeed = tryGetInteger(kTotalFeed)
  let totalFeedUser = tryGetInteger(kTotalFeedUser)
  let kFeedTxStats = "duckling_" + realDucklingId + "_stat_" + lastBlock.timestamp.toString()

  if (maxFeedAmount < currentPayment) then throw("BFD: Cannot feed duckling for such amount, max feed amount is: " + maxFeedAmount.toString()) else 
    let calculateResults = calculateNewDucklingLevel(realDucklingId, currentPayment/100)
    let ducklingOwner = tryGetString(keyOwner(realDucklingId))
    if ducklingOwner != i.caller.toString() then 
      [
        BooleanEntry(keyBlacklisted(realDucklingId), true)
      ] 
      else
      [
        IntegerEntry(kAddressNonce, currentNonce + 1),
        IntegerEntry(kTotalFeed, totalFeed + currentPayment),
        IntegerEntry(kTotalFeedUser, totalFeedUser + currentPayment),
        IntegerEntry(kFeedTxStats, currentPayment),
        StringEntry(kNewLevel, calculateResults._1),
        StringEntry(kFeedTxStats + "_debug", calculateResults._2.makeString(";"))
      ]
  
}

@Callable(i)
func fixLevels(ducklingIds: String) = {
  if (i.callerPublicKey != base58'GDxBbsDRmeY39quNrDsTXKJzFWbQVtjxHseF4ikxZ7n9' && i.caller != this) then throw("BFL: Not authorized") else {
    let ducklingIdsList = ducklingIds.split(",").value()
    func handleId(acc: List[StringEntry], id: String) = {
      let kTotalFeed = keyTotalFeed(id)
      let totalFeed = tryGetInteger(kTotalFeed)

      let kTotalFeedOld = keyTotalFeedOld(id)
      let totalFeedOld = tryGetInteger(kTotalFeedOld)

      let kNewLevel = keyDucklingLevel(id)
      let startingLevel = match getBoolean("duckling_" + id + "_issuedByFeedCall"){
        case b: Boolean => if b == true && tryGetInteger(keyStartPercentage(id)) == 0 then 0.toBigInt() else getDucklingPercentage(id)
        case _ => getDucklingPercentage(id)
      }

      let growth = fraction((totalFeed/100).toBigInt(), percentGrowthPrecision.toBigInt(), DUCKLINGPRICE.toBigInt())
      let growthOld = if totalFeedOld != 0 then fraction(totalFeedOld.toBigInt(), percentGrowthPrecisionOld.toBigInt(), DUCKLINGPRICEOLD.toBigInt()) else 0.toBigInt()
      acc ++ [
      StringEntry(kNewLevel, (startingLevel + growth + growthOld).toString()),
      StringEntry("DEBUG",startingLevel.toString()+" "+growth.toString()+" "+growthOld.toString())
      ]
    }

    FOLD<20>(ducklingIdsList, [], handleId)
  }
}



@Callable(i)
func turnDucklingIntoDuck() = {
  let address = i.caller.toString()
  let txId = i.transactionId.toBase58String()
  let lastIssuedDucklingTs = tryGetInteger(KGlobalIssuedTimestamp)
  let fiveMinInMs = 5 * 60 * 1000
  let timeDiff = lastBlock.timestamp - (lastIssuedDucklingTs+fiveMinInMs);
  if (lastIssuedDucklingTs > 0 && timeDiff < 0) then throw("BTD: Can issue ducklings only once per 5 minutes, please wait for " + fraction(timeDiff, 1, 1000).toString() + " sec.") else 
  if (i.payments.size() != 1) then throw("BTD: Bad payment attached (asset[s] or amount)") else {
    
    let pmt = assetInfo(i.payments[0].value().assetId.value()).value()
    let blackListed = tryGetBoolean(keyBlacklisted(pmt.id.toBase58String()))
    if blackListed then throw("BTD: Can not convert blacklisted duckling!") else 
    if (getCurrentLevelBigInt(pmt.id.toBase58String()) < percentGrowthPrecision.toBigInt()) then throw("BTD: Duckling is not grown yet...") else
    if (pmt.issuer != this) then throw("BTD: Can use only ducklings from this dApp") else {
      strict call = invoke(getIncubatorAddress(), "startDuckHatching", [""], [])
      let kDucklingGrown = keyDucklingGrown(pmt.id.toBase58String())
      [
        BooleanEntry(kDucklingGrown, true),
        IntegerEntry(KGlobalIssuedTimestamp, lastBlock.timestamp)
      ]
    }
  }
}


@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
