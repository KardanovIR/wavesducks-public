{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())

#SC THAT CAN USE COUPONS
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),"static_rebirthAddress").fromBase58String()) #base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),"static_farmingAddress").fromBase58String())
func getGameDappAddress() = Address(tryGetStringExternal(getOracle(),"static_gameDappAddress").fromBase58String()) 
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())
func getMasterAddress() = Address(tryGetStringExternal(getOracle(),"static_cfMasterAddress").fromBase58String())

let wAccPKey = valueOrErrorMessage(getString(getOracle(),"static_warsPKey"),"static_warsPKey not defined").fromBase58String()

let scCanUseCoupons = [getRebirthAddress(),getIncubatorAddress(),getFarmingAddress(),getGameDappAddress()]

func couponsUserSpend(user:String) = user+"_spend"
func couponsUserActive(user:String) = user+"_active"
func couponsUserActiveOld(user:String) = couponsUserActive(user)+"_old"

func addCouponsInternal(user:String,amount:Int)={
    let keyOld = couponsUserActiveOld(user)
    let key = couponsUserActive(user)
    let couponsOld = tryGetInteger(key)
    let coupons = couponsOld+amount
    [
        IntegerEntry(keyOld,couponsOld),
        IntegerEntry(key,coupons)
    ]
}



@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("CCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func addCoupons(user:String,amount:Int) = {
    if i.caller != this && i.callerPublicKey != wAccPKey then throw("CAC: admin only") else 
    addCouponsInternal(user,amount)

}

@Callable(i)
func addCouponsBatch(batch:String) = {
    if i.caller != this && i.callerPublicKey != wAccPKey then throw("CAC: admin only") else
    let couponsList = batch.split(";")
    func handleCoupon(acc: List[IntegerEntry], coupon: String) = {
        let splitArray = split(coupon,":")
        let user = splitArray[0]
        let amount = parseIntValue(splitArray[1])
        strict burnCall = invoke(getBurnAddress(), "burnByInvoke", [amount],[])

        acc++addCouponsInternal(user,amount)

    }
    FOLD<20>(couponsList, [], handleCoupon)
    
}

@Callable(i)
func CFRefund(recipient: String,amount: Int)={
    #Get connected CF address (can be faked)
    let cfAddress = getStringValue(i.caller,"CF_ADDRESS")
    let key = "f_"+cfAddress+"_stake_address"
    #Get connected stake address with a CF address, can not be faked since it's pulled from masterkey
    let stakeAddress = getStringValue(getMasterAddress(),key)
    #Making sure that stakeaddress and invoker are the same and therefor valid
    if stakeAddress != i.caller.toString() then throw("CCR: This is something fishy going on!") else
    let shareAssetId = getStringValue(Address(cfAddress.fromBase58String()),"SHARE_ASSET_ID")
    
    let payments = i.payments
    if size(payments) != 1 then throw("CCR: Please make sure to attach only 1 payment!") else
    let payment = payments[0].value()
    let assetId = payment.assetId.value()
    if assetId.toBase58String() != shareAssetId then throw("CCR: You can only burn "+shareAssetId) else
    #It will never be possible to turn 1CF token into more then 1VEGG, so limit it against abuse
    if amount > payment.amount then throw("CCR: This looks like abuse!") else
    addCouponsInternal(recipient,amount)++
    [
        Burn(assetId,payment.amount)
    ]

}



@Callable(i)
func useCoupons(amountTryingToPay:Int)= {
    let invokingSc = i.caller
    if amountTryingToPay < 0  then throw("CUC: Only positive amount of money can be paid!") else
    if !containsElement(scCanUseCoupons, invokingSc) then throw("CUC: Only certain smart contracts can use this coupon module!") else #prevents outsider to implement our coupons
    let user = i.originCaller.toString()
    let keyActive = couponsUserActive(user)
    let availableCoupons = tryGetInteger(keyActive)
    let leftToPay = if amountTryingToPay > availableCoupons then amountTryingToPay-availableCoupons else 0
    let amountPaid = amountTryingToPay-leftToPay
    let availableCouponsLeft = availableCoupons-amountPaid

    let keySpend = couponsUserSpend(user)
    let keyOld = couponsUserActiveOld(user)


    let totalSpend = tryGetInteger(keySpend)+amountPaid
    (
        [
            IntegerEntry(keySpend,totalSpend),
            IntegerEntry(keyOld,availableCoupons),
            IntegerEntry(keyActive,availableCouponsLeft)
        ],
        amountPaid #Amount paid is the amount a user paid in coupons, so we can reduce this from the actual payment.
    )
}