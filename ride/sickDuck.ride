{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("SAS: wrong type, expected: String")
}


func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case a:Int => a
        case _ => 0
    }
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func tryGetInteger(key: String) = {
    tryGetIntegerExternal(this,key)
}


func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),"static_farmingAddress").fromBase58String())
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),"static_itemsAddress").fromBase58String())

func lastCheckHeightDuck(duckId:String) = duckId+"_check_height"
func lastCheckTxDuck(duckId:String) = duckId+"_check_tx"
func isSickDuck(duckId:String) = duckId+"_sick"

func getRandomNumber(variants: Int, txId: ByteVector, lastCheckDisease: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(lastCheckDisease-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}


@Callable(i)
func checkIfDuckGetSick(duckId: String)={
    if i.caller != getFarmingAddress() then throw("SCIFGS: Only farming can make the duck sick! ") else

    let lastCheck = tryGetString(lastCheckTxDuck(duckId))
    let bytes = if lastCheck =="" then i.transactionId else lastCheck.toBytes()
    
    let lastCheckHeight = tryGetInteger(lastCheckHeightDuck(duckId))
    let number = if lastCheckHeight ==0 then height else lastCheckHeight

    let randomNum = getRandomNumber(20, bytes, number, 2)

    let genericData = [
        StringEntry(lastCheckTxDuck(duckId),i.transactionId.toUtf8String()),
        IntegerEntry(lastCheckHeightDuck(duckId), height)
    ]
    if randomNum == 1 || tryGetBoolean(isSickDuck(duckId)) then
        (
            [
                BooleanEntry(isSickDuck(duckId), true)
            ]++genericData,true
        )
    else
        (genericData,false)

}


@Callable(i)
func healDuck(duckId: String)={
      let assetId = i.payments[0].assetId.value()
      strict artefactName = invoke(getItemsAddress(),"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
        if artefactName != "ART-HEAL_POTION" then throw("You can't heal a duck with this artefact") else
        ([
            BooleanEntry(isSickDuck(duckId), false)
        ],false)
}